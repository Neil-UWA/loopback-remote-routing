var prefixes = require('./prefixes.js');

exports.scopeMethods = scopeMethods;
exports.relationMethods = relationMethods;
exports.defaultMethods = defaultMethods;

/**
 * scopeMethods
 *
 * @param {Object} Model
 * @returns {[String]} remote methods generated by scopes
 */
function scopeMethods (Model) {
  var remoteMethods = [];
  Object.keys(Model).forEach(function(property) {
    if(/^__(get|create|delete|update|count)__\w*/.test(property)) {
      remoteMethods.push(['@', property].join(''));
    };
  });
  return remoteMethods;
};

/**
 * relationMethods
 *
 * @param {Object }
 * @returns {[String]} remote methods generated by relations
 */
function relationMethods (Model) {
  var settings = Model.definition.settings;
  var relations = settings.relations;
  var remoteMethods = [];

  relations && Object.keys(relations).forEach(function(targetModel){
    var type =
      relations[targetModel].through ? 'hasManyThrough' : relations[targetModel].type;

    prefixes[type] && prefixes[type].forEach(function(prefix) {
      remoteMethods.push(prefix+targetModel);
    });
  });
  return remoteMethods;
};

/**
 * defaultMethods
 *
 * @param {Object} Model
 * @returns {[String]} default remote methods for persisted model
 */
function defaultMethods(Model) {
  var remoteMethods = [
    '@create',
    '@upsert',
    '@exists',
    '@findById',
    '@deleteById',
    '@count',
    '@find',
    '@findOne',
    '@createChangeStream',
    '@updateAll',
    'updateAttributes',
    '@replaceById',
    '@replaceOrCreate',
    '@upsertWithWhere'
  ];

  if (Model.modelName === 'User' || Model.base.modelName === 'User') {
    remoteMethods = remoteMethods.concat([
      '@login',
      '@logout',
      '@confirm',
      '@resetPassword',
      '@change-password',
      '@reset-password'
    ]);
  }

  if (Model.dataSource.settings.connector === 'loopback-component-storage') {
    remoteMethods = remoteMethods.concat([
      '@download',
      '@getFile',
      '@getFiles',
      '@removeFile',
      '@getContainers',
      '@createContainer',
      '@destroyContainer',
      '@getContainer',
      '@upload'
    ]);
  }

  return remoteMethods;
};
